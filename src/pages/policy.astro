---
import LayoutOuter from "../layouts/LayoutOuter.astro";
import Basics from "../components/basics.astro";
import Protocol from "../components/protocol.astro";
import Energy from "../components/energy.astro";
import Cost from "../components/cost.astro";
---
<LayoutOuter title="Austausch Klimaanlage - Maßnahme Details">
	<a href="/" id="return">Zurück zur Übersicht</a>
	<h2>Austausch Klimaanlage</h2>
	<nav>
		<a>Basisdaten</a>
		<a>Bearbeitung</a>
		<a>Energieeffizienz</a>
		<a>Wirtschaftlichkeit</a>
	</nav>
	<div class="tab-container">
		<Basics />
		<Protocol />
		<Energy />
		<Cost />
	</div>
</LayoutOuter>

<script>
	//#region Tab Handling
	let tabLinks = document.getElementsByTagName("nav")[0].children;
	for (let i = 0; i < tabLinks.length; i++) {
		tabLinks[i].addEventListener("click", function() {
			switchTab(i);
		});
	}

	switchTab(0);

	function switchTab(tabNumber:number) {
		let tabs = document.getElementsByClassName("tab-content");
		
		for (let i = 0; i < tabs.length; i++) {
			tabs[i].classList.remove("active");
			tabLinks[i].classList.remove("active");
		}
		tabs[tabNumber].classList.add("active");
		document.getElementsByTagName("nav")[0].children[tabNumber].classList.add("active");
	}
	//#endregion

	function formatOutput(value:number, unit:string):string {
		if(value == 0) {
			return "-";
		}
		return Math.round(value).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + " " + unit;
	}

	class savingsGroup {
		powerToCo2Ratio:number;
		powerToCostRatio:number;
		energySavings:number;
		powerRatio:number;
		inputElement:HTMLInputElement;
		outputElement:NodeListOf<Element>;

		constructor(powerToCo2Ratio:number, powerToCostRatio:number, powerRatio:number, groupElement:Element) {
			this.energySavings = 0;
			this.powerRatio = powerRatio;
			this.powerToCo2Ratio = powerToCo2Ratio;
			this.powerToCostRatio = powerToCostRatio;
			this.outputElement = groupElement.querySelectorAll(".output");
			this.inputElement = (groupElement.querySelector(".inputEnergy") as HTMLInputElement);
			this.inputElement.addEventListener("focusout", () => { this.parseEnergy(this.inputElement); parseEnergyTotal();});
			this.inputElement.addEventListener("change", () => { this.parseEnergy(this.inputElement); parseEnergyTotal();});
			this.parseEnergy(this.inputElement);
		}

		parseEnergy(inputElement:HTMLInputElement):void {
			let newValue = parseFloat(inputElement.value);
			if(isNaN(newValue)) {
				return;
			}
			this.energySavings = newValue * this.powerRatio;
			(this.outputElement[0] as HTMLElement).innerText = formatOutput(this.energySavings, "kWh");
			(this.outputElement[1] as HTMLElement).innerText = formatOutput(this.energySavings * this.powerToCo2Ratio, "kg");
			(this.outputElement[2] as HTMLElement).innerText = formatOutput(this.energySavings * this.powerToCostRatio, "€");
		}

		//#region getters
		get savingsEnergy():number {
			return this.energySavings;
		}

		get savingsCo2():number {
			return this.energySavings * this.powerToCo2Ratio;
		}

		get savingsCost():number {
			return this.energySavings * this.powerToCostRatio;
		}
		//#endregion
	}


	let inputsEnergy:Array<savingsGroup> = [
		new savingsGroup(0.5801, 0.21, 1, (document.querySelector("#tabEnergy .main-content .details-grouping:nth-of-type(1)") as Element)),
		new savingsGroup(0.3251, 0.25, 11.5, (document.querySelector("#tabEnergy .main-content .details-grouping:nth-of-type(2)") as Element))
	];
	
	let totalEnergySavings:number = 0;
	let totalMoneySavings:number = 0;
	let totalCo2Savings:number = 0;
	function parseEnergyTotal():void {
		totalEnergySavings = 0;
		totalMoneySavings = 0;
		totalCo2Savings = 0;
		for(let i = 0; i < inputsEnergy.length; i++) {
			totalEnergySavings += inputsEnergy[i].savingsEnergy;
			totalMoneySavings += inputsEnergy[i].savingsCost;
			totalCo2Savings += inputsEnergy[i].savingsCo2;
		}

		// energy tab
		let outputElements = document.querySelectorAll("#tabEnergy .sidebar .output");
		(outputElements[0] as HTMLElement).innerText = formatOutput(totalEnergySavings, "kWh");
		(outputElements[1] as HTMLElement).innerText = formatOutput(totalCo2Savings, "kg");
		(outputElements[2] as HTMLElement).innerText = formatOutput(totalMoneySavings, "€");

		// cost tab
		outputElements = document.querySelectorAll("#tabCost .main-content .outputEnergy");
		(outputElements[0] as HTMLElement).innerText = formatOutput(totalMoneySavings, "€");
		(outputElements[1] as HTMLElement).innerText = formatOutput(totalCo2Savings, "kg");
	}
	parseEnergyTotal();

	// der switch zwischen manuelle eingabe und berechnete eingabe
	function getSavings():Array<number> {
		let radio = document.querySelector("#tabCost .main-content input[type='radio']:checked") as HTMLInputElement;
		if(radio !== null && radio.value == "manual") {
			let values = [0, 0];
			let input1 = document.querySelector("#energySavingsSourceManualCost") as HTMLInputElement;
			let input1value = parseFloat(input1.value);
			let input2 = document.querySelector("#energySavingsSourceManualCo2") as HTMLInputElement;
			let input2value = parseFloat(input2.value);
			if(input1 !== null && !isNaN(input1value)) {
				values[0] = input1value;
			}
			if(input2 !== null && !isNaN(input2value)) {
				values[1] = input2value;
			}
			return values;
		}
		return [totalMoneySavings, totalCo2Savings];
	}

	type Case = {
		Name: string;
		Investition: number;
		Nutzungsdauer: number;
		Zinssatz: number;
		Energiepreissteigerung: number;
		SonstigePreissteigerung: number;
	}

	type cashflowYear = {
		savings: number;
		costs: number;
	}

	let cashflow:Array<cashflowYear> = [];

	function parseCost():void {
		let cases:Array<Case> = [];
		let caseNames = ["likelyCase", "bestCase", "worstCase"];
		caseNames.forEach(caseName => {
			let inputsCase = document.querySelectorAll("#tabCost .main-content .inputCost." + caseName );
			let newCase:Case = {
				Name: caseName,
				Investition: parseFloat((inputsCase[0] as HTMLInputElement).value.replaceAll(",",".")) || 0,
				Nutzungsdauer: parseFloat((inputsCase[1] as HTMLInputElement).value.replaceAll(",",".")) || 0,
				Zinssatz: parseFloat((inputsCase[2] as HTMLInputElement).value.replaceAll(",",".")) || 0,
				Energiepreissteigerung: parseFloat((inputsCase[3] as HTMLInputElement).value.replaceAll(",",".")) || 0,
				SonstigePreissteigerung: parseFloat((inputsCase[4] as HTMLInputElement).value.replaceAll(",",".")) || 0
			};
			cases.push(newCase);
			let moneySavings, Co2Savings;
			[moneySavings, Co2Savings] = getSavings();
			let outputElements = document.querySelectorAll("#tabCost .main-content .outputCost." + caseName);

			
			// interne verzinsung ???
			(outputElements[0] as HTMLElement).innerText = formatOutput(newCase.Zinssatz, "%");
			// statische amortisationszeit ???
			(outputElements[1] as HTMLElement).innerText = formatOutput(newCase.Investition / moneySavings, "Jahre");
			// dynamische amortisationszeit ???
			(outputElements[2] as HTMLElement).innerText = formatOutput(newCase.Investition / moneySavings, "Jahre");
			// kapitalwert nach laufzeit ???
			(outputElements[3] as HTMLElement).innerText = formatOutput((moneySavings * newCase.Nutzungsdauer) - newCase.Investition, "€");
			// energetische einsparung
			(outputElements[4] as HTMLElement).innerText = formatOutput(totalEnergySavings * newCase.Nutzungsdauer, "kWh");
			// finanzielle einsparung
			(outputElements[5] as HTMLElement).innerText = formatOutput(moneySavings * newCase.Nutzungsdauer, "€");
			// co2 einsparung
			(outputElements[6] as HTMLElement).innerText = formatOutput(Co2Savings * newCase.Nutzungsdauer, "kg");

		});
	}

	let inputsCost = document.querySelectorAll("#tabCost .main-content .inputCost");
	for (let i = 0; i < inputsCost.length; i++) {
		inputsCost[i].addEventListener("focusout", parseCost);
		inputsCost[i].addEventListener("change", parseCost);
	}
	let inputsRadio = document.querySelectorAll("#tabCost .main-content input[type='radio']");
	for (let i = 0; i < inputsRadio.length; i++) {
		inputsRadio[i].addEventListener("input", parseCost);
	}
	parseCost();
	//#endregion
</script>

<style>
	#return {
		font-size: 12px;
		margin-left: 6px;
	}

	#return::before {
		content: "\2329";
        display: inline-block;
        font-weight: normal;
        transform: translate(-5px, -1px);
	}

	.tab-container {
		flex-grow: 1;
		display: flex;
		flex-direction: column;
		align-items: stretch;
	}

	nav {
		display: flex;
		flex-direction: row;
		gap: 0;
		box-shadow: inset 0 -1px 0 0 var(--borders);
	}

	nav a {
		font-size: 16px;
		text-decoration: none;
		padding: 10px 20px;
		color: var(--text-light);
	}

	nav a:hover {
		color: var(--text);
		cursor: pointer;
	}

	nav a.active {
		color: var(--text);
		background-color: #f3f3f3;
		border: var(--borders) 1px solid;
		border-radius: 5px 5px 0 0;
		border-bottom: none;
		cursor: default;
	}
</style>