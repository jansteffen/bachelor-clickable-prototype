---
import LayoutOuter from "../layouts/LayoutOuter.astro";
import Basics from "../components/basics.astro";
import Protocol from "../components/protocol.astro";
import Energy from "../components/energy.astro";
import Cost from "../components/cost.astro";
---
<LayoutOuter title="Austausch Klimaanlage - Maßnahme Details">
	<a href="/" id="return">Zurück zur Übersicht</a>
	<h2>Austausch Klimaanlage</h2>
	<nav>
		<a>Basisdaten</a>
		<a>Bearbeitung</a>
		<a>Energieeffizienz</a>
		<a>Wirtschaftlichkeit</a>
	</nav>
	<div class="tab-container">
		<Basics />
		<Protocol />
		<Energy />
		<Cost />
	</div>
</LayoutOuter>

<script>
	//#region Tab Handling
	let tabLinks = document.getElementsByTagName("nav")[0].children;
	for (let i = 0; i < tabLinks.length; i++) {
		tabLinks[i].addEventListener("click", function() {
			switchTab(i);
		});
	}

	switchTab(0);

	function switchTab(tabNumber:number) {
		let tabs = document.getElementsByClassName("tab-content");
		
		for (let i = 0; i < tabs.length; i++) {
			tabs[i].classList.remove("active");
			tabLinks[i].classList.remove("active");
		}
		tabs[tabNumber].classList.add("active");
		document.getElementsByTagName("nav")[0].children[tabNumber].classList.add("active");
	}
	//#endregion

	function formatOutput(value:number, unit:string):string {
		if(value == 0 || value == Infinity || isNaN(value)) {
			return "-";
		}
		return Math.round(value).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ".") + " " + unit;
	}

	function parseInput(inputElement:Element):number {
		let newValue = parseFloat((inputElement as HTMLInputElement).value.replaceAll(",","."));
		if(isNaN(newValue)) {
			return 0;
		}
		return newValue;
	}

	//#region Energy Tab
	class savingsGroup {
		powerToCo2Ratio:number;
		powerToCostRatio:number;
		energySavings:number;
		powerRatio:number;
		inputElement:HTMLInputElement;
		outputElement:NodeListOf<Element>;

		constructor(powerToCo2Ratio:number, powerToCostRatio:number, powerRatio:number, groupElement:Element) {
			this.energySavings = 0;
			this.powerRatio = powerRatio;
			this.powerToCo2Ratio = powerToCo2Ratio;
			this.powerToCostRatio = powerToCostRatio;
			this.outputElement = groupElement.querySelectorAll(".output");
			this.inputElement = (groupElement.querySelector(".inputEnergy") as HTMLInputElement);
			this.inputElement.addEventListener("focusout", () => { this.parseEnergy(this.inputElement); parseEnergyTotal();});
			this.inputElement.addEventListener("change", () => { this.parseEnergy(this.inputElement); parseEnergyTotal();});
			this.parseEnergy(this.inputElement);
		}

		parseEnergy(inputElement:HTMLInputElement):void {
			let newValue = parseFloat(inputElement.value);
			if(isNaN(newValue)) {
				return;
			}
			this.energySavings = newValue * this.powerRatio;
			(this.outputElement[0] as HTMLElement).innerText = formatOutput(this.energySavings, "kWh");
			(this.outputElement[1] as HTMLElement).innerText = formatOutput(this.energySavings * this.powerToCo2Ratio, "kg");
			(this.outputElement[2] as HTMLElement).innerText = formatOutput(this.energySavings * this.powerToCostRatio, "€");
		}

		//#region getters
		get savingsEnergy():number {
			return this.energySavings;
		}

		get savingsCo2():number {
			return this.energySavings * this.powerToCo2Ratio;
		}

		get savingsCost():number {
			return this.energySavings * this.powerToCostRatio;
		}
		//#endregion
	}


	let inputsEnergy:Array<savingsGroup> = [
		new savingsGroup(0.5801, 0.21, 1, (document.querySelector("#tabEnergy .main-content .details-grouping:nth-of-type(1)") as Element)),
		new savingsGroup(0.3251, 0.25, 11.5, (document.querySelector("#tabEnergy .main-content .details-grouping:nth-of-type(2)") as Element))
	];
	
	let totalEnergySavings:number = 0;
	let totalMoneySavings:number = 0;
	let totalCo2Savings:number = 0;
	function parseEnergyTotal():void {
		totalEnergySavings = 0;
		totalMoneySavings = 0;
		totalCo2Savings = 0;
		for(let i = 0; i < inputsEnergy.length; i++) {
			totalEnergySavings += inputsEnergy[i].savingsEnergy;
			totalMoneySavings += inputsEnergy[i].savingsCost;
			totalCo2Savings += inputsEnergy[i].savingsCo2;
		}

		// energy tab
		let outputElements = document.querySelectorAll("#tabEnergy .sidebar .output");
		(outputElements[0] as HTMLElement).innerText = formatOutput(totalEnergySavings, "kWh");
		(outputElements[1] as HTMLElement).innerText = formatOutput(totalCo2Savings, "kg");
		(outputElements[2] as HTMLElement).innerText = formatOutput(totalMoneySavings, "€");

		// cost tab
		outputElements = document.querySelectorAll("#tabCost .main-content .outputEnergy");
		(outputElements[0] as HTMLElement).innerText = formatOutput(totalMoneySavings, "€");
		(outputElements[1] as HTMLElement).innerText = formatOutput(totalCo2Savings, "kg");
	}
	parseEnergyTotal();
	//#endregion

	//#region Cost Tab
	// der switch zwischen manuelle eingabe und berechnete eingabe
	function getSavings():Array<number> {
		let radio = document.querySelector("#tabCost .main-content input[type='radio']:checked") as HTMLInputElement;
		if(radio !== null && radio.value == "manual") {
			let values = [0, 0];
			let input1 = document.querySelector("#energySavingsSourceManualCost") as HTMLInputElement;
			let input1value = parseFloat(input1.value);
			let input2 = document.querySelector("#energySavingsSourceManualCo2") as HTMLInputElement;
			let input2value = parseFloat(input2.value);
			if(input1 !== null && !isNaN(input1value)) {
				values[0] = input1value;
			} else {
				values[0] = 0;	
			}
			if(input2 !== null && !isNaN(input2value)) {
				values[1] = input2value;
			} else {
				values[1] = 0;	
			}
			return values;
		}
		return [totalMoneySavings, totalCo2Savings];
	}

	class extraSavingsFactor {
		amountInput:HTMLInputElement;
		typeInput:HTMLSelectElement;
		nameInput:HTMLInputElement;
		container: HTMLElement;
		constructor(referenceNode:HTMLElement) {
			this.container = document.createElement("section");
			this.container.classList.add("extraSavingsFactor");

			this.nameInput = document.createElement("input") as HTMLInputElement;
			this.nameInput.type = "text";
			this.nameInput.placeholder = "Bezeichnung";
			this.nameInput.addEventListener("focusout", () => { parseCost();});
			this.nameInput.addEventListener("change", () => {  parseCost();});
			this.container.appendChild(this.nameInput);

			let unitWrapper = document.createElement("label");
			unitWrapper.setAttribute("data-unit", "€");
			unitWrapper.classList.add("unit");
			this.amountInput = document.createElement("input") as HTMLInputElement;
			this.amountInput.type = "number";
			this.amountInput.addEventListener("focusout", () => { parseCost();});
			this.amountInput.addEventListener("change", () => { parseCost();});
			unitWrapper.appendChild(this.amountInput);
			this.container.appendChild(unitWrapper);

			this.typeInput = document.createElement("select") as HTMLSelectElement;
			this.typeInput.innerHTML = "<option value='1'>Energie</option><option value='2' selected='selected'>Sonstige</option><option value='3'>Unverzinst</option>";
			this.typeInput.addEventListener("input", () => { parseCost();});
			this.container.appendChild(this.typeInput);
			referenceNode.parentElement?.insertBefore(this.container, referenceNode);
		}

		get savings():cashflow | null {
			if(this.amountInput.valueAsNumber === 0 || isNaN(this.amountInput.valueAsNumber) || this.nameInput.value === "" || this.typeInput.value === "") {
				return null;
			}
			return {
				savings: this.amountInput.valueAsNumber,
				name: this.nameInput.value,
				type: parseInt(this.typeInput.value)
			};
		}
	}

	let extraSavingsFactors:Array<extraSavingsFactor> = [];
	function addNewSavingsFactor() {
		let parent = document.querySelector("#buttonAddNewFactor")
		if (parent === null) {
			return;
		} else {
			extraSavingsFactors.push(new extraSavingsFactor((parent as HTMLElement)));
		}
	}
	document.querySelector("#buttonAddNewFactor")?.addEventListener("click", addNewSavingsFactor);

	enum cashflowType {
		energy = 1,
		other = 2,
		noInterest = 3
	}

	type cashflow = {
		savings: number;
		name: string;
		type: cashflowType;
	}

	type Case = {
		Name: string;
		Investition: number;
		Nutzungsdauer: number;
		Zinssatz: number;
		Energiepreissteigerung: number;
		SonstigePreissteigerung: number;
	}

	function parseCost():void {
		//let cases:Array<Case> = [];
		let caseNames = ["likelyCase", "bestCase", "worstCase"];
		caseNames.forEach(caseName => {
			let inputsCase = document.querySelectorAll("#tabCost .main-content .inputCost." + caseName );
			let newCase:Case = {
				Name: caseName,
				Investition: parseInput(inputsCase[0]),
				Nutzungsdauer: parseInput(inputsCase[1]),
				Zinssatz: parseInput(inputsCase[2]),
				Energiepreissteigerung: parseInput(inputsCase[3]),
				SonstigePreissteigerung: parseInput(inputsCase[4])
			};
			//cases.push(newCase);
			let moneySavings, Co2Savings;
			[moneySavings, Co2Savings] = getSavings();
			
			// Cashflow Tabelle
			if(caseName === "likelyCase" && newCase.Investition !== 0 && newCase.Nutzungsdauer !== 0 && newCase.Zinssatz !== 0) {
				let cashflowTable = document.querySelector("#cashflowOutputTable tbody") as HTMLTableElement;
				cashflowTable.innerHTML = "";
				let cumulative:number = 0;
				for (let i = 0; i < newCase.Nutzungsdauer + 1; i++) {
					let cashflowTableRow = document.createElement("tr");

					// Jahr
					let newCell = document.createElement("td");
					newCell.innerText = i.toString();
					cashflowTableRow.appendChild(newCell);

					let newCashflowYear:Array<cashflow> = [];

					// Cashflows für das Jahr erstellen
					if (i == 0) {
						// Investitionsjahr
						newCashflowYear.push({
							savings: -newCase.Investition,
							name: "Investition",
							type: cashflowType.noInterest	
						});
					} else {
						// Folgejahre mit Zinsen
						newCashflowYear.push({
							savings: moneySavings,
							name: "Energieeinsparung",
							type: cashflowType.energy
						});
						for(let j = 0; j < extraSavingsFactors.length; j++) {
							if(extraSavingsFactors[j].savings !== null) {
								newCashflowYear.push(extraSavingsFactors[j].savings as cashflow);
							}
						}
						//newCashflowYear.push({
						//	savings: 250,
						//	name: "geringere Wartungskosten",
						//	type: cashflowType.other
						//});
					}

					// Cashflows in Tabelle eintragen
					newCell = document.createElement("td");
					let thisYearsTotal = 0;
					for (let j = 0; j < newCashflowYear.length; j++) {
						thisYearsTotal += newCashflowYear[j].savings;
						newCell.innerHTML += "<section><span>"
							+ newCashflowYear[j].name 
							+ ":</span><span>" 
							+  formatOutput(newCashflowYear[j].savings, "€") 
							+ "</span></section>\n";
					}
					newCell.innerHTML += "<hr />";
					newCell.innerHTML += "<section><span>Gesamt:</span><span>" 
						+ formatOutput(thisYearsTotal, "€") 
						+ "</span></section>\n";
					cashflowTableRow.appendChild(newCell);
					

					// Abgezinster Cashflow
					newCell = document.createElement("td");
					thisYearsTotal = 0;
					for (let j = 0; j < newCashflowYear.length; j++) {
						let valueWithInterest = 0;
						switch(newCashflowYear[j].type) {
							case cashflowType.energy:
								valueWithInterest = newCashflowYear[j].savings * Math.pow(1 + (newCase.Energiepreissteigerung / 100), i);
								break;
							case cashflowType.other:
							 valueWithInterest = newCashflowYear[j].savings * Math.pow(1 + (newCase.SonstigePreissteigerung / 100), i);
								break;
							case cashflowType.noInterest:
								valueWithInterest = newCashflowYear[j].savings;
								break;
						}
						thisYearsTotal += valueWithInterest;
						newCell.innerHTML += "<section><span>"
							+ newCashflowYear[j].name 
							+ ":</span><span>" 
							+  formatOutput(valueWithInterest, "€") 
							+ "</span></section>\n";
					}
					newCell.innerHTML += "<hr />";
					newCell.innerHTML += "<section><span>Gesamt:</span><span>" 
						+ formatOutput(thisYearsTotal, "€") 
						+ "</span></section>\n";
					cashflowTableRow.appendChild(newCell);
					cumulative += thisYearsTotal;

					// Kumulativer Cashflow
					newCell = document.createElement("td");
					newCell.innerText = formatOutput(cumulative, "€");
					cashflowTableRow.appendChild(newCell);

					// Reihe einfügen
					cashflowTable.appendChild(cashflowTableRow);
				}
			}


			// gesamt / ( 1+ kalkulatorischer zinssatz) ^ Jahreszahl			
			
			// Ergebniss Tabelle
			let outputElements = document.querySelectorAll("#tabCost .main-content .outputCost." + caseName);
			// interne verzinsung ???
			(outputElements[0] as HTMLElement).innerText = "TODO"; //formatOutput(newCase.Zinssatz, "%");
			// statische amortisationszeit ???
			(outputElements[1] as HTMLElement).innerText = (newCase.Investition / moneySavings) !== 0 ?  (newCase.Investition / moneySavings).toFixed(1).replace(".",",") + " Jahre" : "-";
			// dynamische amortisationszeit ???
			(outputElements[2] as HTMLElement).innerText = "TODO"; //formatOutput(newCase.Investition / moneySavings, "Jahre");
			// kapitalwert nach laufzeit ???
			(outputElements[3] as HTMLElement).innerText = "TODO"; //formatOutput((moneySavings * newCase.Nutzungsdauer) - newCase.Investition, "€");
			// energetische einsparung
			(outputElements[4] as HTMLElement).innerText = formatOutput(totalEnergySavings * newCase.Nutzungsdauer, "kWh");
			// finanzielle einsparung
			(outputElements[5] as HTMLElement).innerText = formatOutput(moneySavings * newCase.Nutzungsdauer, "€");
			// co2 einsparung
			(outputElements[6] as HTMLElement).innerText = formatOutput(Co2Savings * newCase.Nutzungsdauer, "kg");

		});
	}

	// Event Listener für die Eingabefelder
	let inputsCost = document.querySelectorAll("#tabCost .main-content .inputCost");
	for (let i = 0; i < inputsCost.length; i++) {
		inputsCost[i].addEventListener("focusout", parseCost);
		inputsCost[i].addEventListener("change", parseCost);
	}
	let inputsRadio = document.querySelectorAll("#tabCost .main-content input[type='radio']");
	for (let i = 0; i < inputsRadio.length; i++) {
		inputsRadio[i].addEventListener("input", parseCost);
	}
	parseCost();
	//#endregion
</script>

<style>
	#return {
		font-size: 12px;
		margin-left: 6px;
	}

	#return::before {
		content: "\2329";
        display: inline-block;
        font-weight: normal;
        transform: translate(-5px, -1px);
	}

	.tab-container {
		flex-grow: 1;
		display: flex;
		flex-direction: column;
		align-items: stretch;
	}

	nav {
		display: flex;
		flex-direction: row;
		gap: 0;
		box-shadow: inset 0 -1px 0 0 var(--borders);
	}

	nav a {
		font-size: 16px;
		text-decoration: none;
		padding: 10px 20px;
		color: var(--text-light);
	}

	nav a:hover {
		color: var(--text);
		cursor: pointer;
	}

	nav a.active {
		color: var(--text);
		background-color: #f3f3f3;
		border: var(--borders) 1px solid;
		border-radius: 5px 5px 0 0;
		border-bottom: none;
		cursor: default;
	}
</style>